{
  "command": "agbenchmark start",
  "benchmark_git_commit_sha": "https://github.com/Significant-Gravitas/Auto-GPT-Benchmarks/tree/cdb25404be74327e09945779e1012bbe60d24fbf",
  "agent_git_commit_sha": "https://github.com/AutoPackAI/beebot/tree/59d4e93c133612a0319d135bb0eb08bbcead9fa2",
  "completion_time": "2023-08-13-08:41",
  "benchmark_start_time": "2023-08-13-08:12",
  "metrics": {
    "run_time": "1771.07 seconds",
    "highest_difficulty": "novice: 3"
  },
  "tests": {
    "TestWriteFile": {
      "data_path": "agbenchmark/challenges/interface/write_file/data.json",
      "is_regression": true,
      "category": [
        "interface"
      ],
      "task": "Write the word 'Washington' to a .txt file",
      "answer": "The word 'Washington', printed to a .txt file named anything",
      "description": "Tests the agents ability to write to a file",
      "metrics": {
        "difficulty": "interface",
        "success": true,
        "attempted": true,
        "success_%": 40,
        "cost": 0.020855000000000002,
        "run_time": "60.009 seconds"
      },
      "reached_cutoff": true
    },
    "TestSearch": {
      "data_path": "agbenchmark/challenges/interface/search/data.json",
      "is_regression": false,
      "category": [
        "interface"
      ],
      "task": "Open 'https://silennaihin.com/random/plain.html' and paste all of the text on the page in a .txt file",
      "answer": "This is a Heading\nThis is a paragraph.",
      "description": "Tests if an llm can search",
      "metrics": {
        "difficulty": "interface",
        "success": true,
        "attempted": true,
        "success_%": 20,
        "cost": 0.035061999999999996,
        "run_time": "120.012 seconds"
      },
      "reached_cutoff": true
    },
    "TestReadFile": {
      "data_path": "agbenchmark/challenges/interface/read_file/data.json",
      "is_regression": true,
      "category": [
        "interface"
      ],
      "task": "Read the file called file_to_read.txt and write its content to a file called output.txt",
      "answer": "The content of output.txt should be 'Hello World!'",
      "description": "Tests the ability for an agent to read a file.",
      "metrics": {
        "difficulty": "interface",
        "success": true,
        "attempted": true,
        "success_%": 40,
        "cost": 0.022563,
        "run_time": "60.009 seconds"
      },
      "reached_cutoff": true
    },
    "TestPlanCreation": {
      "data_path": "agbenchmark/challenges/content_gen/2_plan/data.json",
      "is_regression": false,
      "category": [
        "content_gen"
      ],
      "task": "As an agent powered by a large language model, create a plan for yourself based on the task of booking a flight to Toronto. Output this plan into a .txt file.",
      "answer": "1. Search for flights to Toronto.\n2. Select the cheapest flight.\n3. Book the flight.\n4. Pay for the flight.\n5. Confirm the flight.",
      "description": "Tests ability to generate content based on the content of 2 files.",
      "metrics": {
        "difficulty": "basic",
        "success": true,
        "attempted": true,
        "success_%": 20,
        "cost": 0.07089300000000001,
        "run_time": "120.922 seconds"
      },
      "reached_cutoff": true
    },
    "TestBasicRetrieval": {
      "data_path": "agbenchmark/challenges/retrieval/r1_book_price/data.json",
      "is_regression": false,
      "category": [
        "retrieval"
      ],
      "task": "Write the price of the book in this url 'http://books.toscrape.com/catalogue/meditations_33/index.html' to a .txt file.",
      "answer": "Â£25.89",
      "description": "Specifies specific website to retrieve website from.",
      "metrics": {
        "difficulty": "basic",
        "success": true,
        "attempted": true,
        "success_%": 20,
        "cost": 0.055581,
        "run_time": "60.009 seconds"
      },
      "reached_cutoff": true
    },
    "TestBasicMemory": {
      "data_path": "agbenchmark/challenges/memory/m1_id/data.json",
      "is_regression": true,
      "category": [
        "memory"
      ],
      "task": "Follow the instructions in the instructions_1.txt file",
      "answer": "2314",
      "description": "Tests ability for the agent to remember information between each action. An id is presented initially and the agent has to remember it after reading 4 other files",
      "metrics": {
        "difficulty": "basic",
        "success": true,
        "attempted": true,
        "success_%": 30,
        "cost": 0.07775599999999999,
        "run_time": "120.009 seconds"
      },
      "reached_cutoff": true
    },
    "TestDebugSimpleTypoWithGuidance": {
      "data_path": "agbenchmark/challenges/code/c2_debug_suite/d2.1_guided/data.json",
      "is_regression": true,
      "category": [
        "code",
        "iterate"
      ],
      "task": "1- Run test.py.\n2- Read code.py.\n3- Modify code.py.\nRepeat step 1, 2 and 3 until test.py runs without errors.\n",
      "answer": "[0, 1] [2, 5] [0, 3]",
      "description": "Tests ability for the agent to debug python code with a simple typo in it.",
      "metrics": {
        "difficulty": "novice",
        "success": true,
        "attempted": true,
        "success_%": 40,
        "cost": 0.026054,
        "run_time": "75.045 seconds"
      },
      "reached_cutoff": true
    },
    "TestAdaptSimpleTypoWithGuidance": {
      "data_path": "agbenchmark/challenges/adapatability/a1_debug/data.json",
      "is_regression": false,
      "category": [
        "adaptability"
      ],
      "task": "1- Run code.py.\n2- Read test.py.\n3- Modify test.py.\nRepeat step 1, 2 and 3 until code.py runs without errors.\n",
      "answer": "Same as the original DebugWithGuidance test - [0, 1] [2, 5] [0, 3]",
      "description": "A version of the debug challenge where the wrong files to test and change are given. The llm must figure the challenges out",
      "metrics": {
        "difficulty": "intermediate",
        "success": true,
        "attempted": true,
        "success_%": 30,
        "cost": 0.037561,
        "run_time": "75.044 seconds"
      },
      "reached_cutoff": true
    },
    "TestFunctionCodeGeneration": {
      "data_path": "agbenchmark/challenges/code/c3_writing_suite_2/d3_two_sum/data.json",
      "is_regression": true,
      "category": [
        "code"
      ],
      "task": "Create a two_sum function in a file called code.py. Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].",
      "answer": "The two_sum function coded properly.",
      "description": "Tests ability for the agent to create the two_sum function.",
      "metrics": {
        "difficulty": "advanced",
        "success": true,
        "attempted": true,
        "success_%": 30,
        "cost": 0.021909999999999995,
        "run_time": "90.045 seconds"
      },
      "reached_cutoff": true
    }
  },
  "config": {
    "workspace": "workspace"
  }
}